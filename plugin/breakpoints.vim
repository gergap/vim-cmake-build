" breakpoints.vim - Integrates GDB breakpoint configuration in Vim
" Author: Gerhard Gappmeier <gerhard.gappmeier@ascolab.com>
" Version: 1.0
" Home: github.com/gergap/vim-cmake-build.git

" include protection
if exists('g:autoloaded_breakpoints') || &cp
  finish
endif
let g:autoloaded_breakpoints = 1
" break point index that will be incremented for each breakpoint
let g:bpindex = 1
let s:get_bp_icon = expand('<sfile>:p:h:h').'/icons/breakpoint.xpm'

" Initializes the breakpoint functionality by defining a new sign type.
function! s:BreakpointInit()
    hi Breakpoint ctermfg=red ctermbg=black
    hi BreakpointLine ctermfg=black ctermbg=red
    exe 'sign define breakpoint text=ðŸ…‘ icon='.s:get_bp_icon.' texthl=Breakpoint linehl=BreakpointLine'
endfunction

" Creates a new split with information about all existing breakpoints
function! s:BreakpointList()
    new
    call setline(1, "List of breakpoints:")
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted nomodified
    let bplist = sign_query('breakpoint')
    for bp in values(bplist)
        let pbinfo = bp.index.': '.bp.file.':'.bp.line
        call append(line('$'), pbinfo)
    endfor
endfunction

" Populates a location list with breakpoints.
function! s:BreakpointLocList()
    let bplist = sign_query('breakpoint')
    let locations = []
    for bp in values(bplist)
        let loc = { 'filename': bp.file, 'lnum': bp.line }
        call add(locations, loc)
    endfor
    call setloclist(0, locations, 'r')
    exe "lopen"
endfunction

function! s:SetBreakpoint(file, line)
    " set sign
    call sign_set('breakpoint', g:bpindex, a:file, a:line)
    " increment breakpoint index
    let g:bpindex = g:bpindex+1
endfunction

function! s:RemoveBreakpoint(bp)
    " remove sign
    call sign_remove('breakpoint', a:file, a:line)
endfunction

function! s:RemoveAllBreakpoints()
    " remove all signs of type breakpoint
    call sign_remove('breakpoint')
endfunction

" Reads a list of breakpoints from file.
" This file can be generated by GDB using the provided GDB hook script.
" It does not work with GDB's "save breakpoints" function because, this 
" does not create the full path.
function! breakpoints#load()
    call s:RemoveAllBreakpoints()
    let filename = cmake#get_workingdir().'/.breakpoints.gdb'
    let lines = readfile(filename)
    let g:bpindex = 1
    exe "tabnew"
    for line in lines
        let loc = strpart(line, 6)
        let parts = split(loc, ':')
        let file = parts[0]
        let line = parts[1]
        " check if buffer for file exists
        if bufloaded(file) == 0
            " load file into buffer (required to set sign)
            exe "edit ".file
"            noautocmd exe "edit ".file
        endif
        call s:SetBreakpoint(file, line)
    endfor
    exe "tabclose"
    redraw!
endfunction

" Saves Vim's list of breakpoints in a file that can be sourced by .gdbinit.
function! breakpoints#save()
    let filename = cmake#get_workingdir().'/.breakpoints.gdb'
    let bplist = sign_query('breakpoint')
    let bplines = []
    for bp in values(bplist)
        let loc = bp.file.':'.bp.line
        let bpline = 'break '.loc
        call add(bplines, bpline)
    endfor
    call writefile(bplines, filename)
endfunction

" Toggles the breakpoint in the current line.
" This function does not check if this make sense. Every line is accepted.
function! s:BPtoggle()
    let bufno = bufnr('%')
    let line = line('.')
    call sign_toggle('breakpoint', bufno, line)
endfunction

nnoremap <space> :call <SID>BPtoggle()<cr>

command! BPlist call s:BreakpointList()
command! BPloclist call s:BreakpointLocList()
command! BPtoggle call s:BPtoggle()
command! BPload call breakpoints#load()
command! BPsave call breakpoints$save()

call s:BreakpointInit()


